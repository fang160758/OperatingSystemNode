<!--
 * @Descripttion: 
 * @version: 
 * @Author: Fang
 * @email: 2192294938@qq.com
 * @Date: 2021-11-03 18:34:24
 * @LastEditors: Fang
 * @LastEditTime: 2021-11-03 18:34:49
-->
1.只用两个工作和两个队列运行几个随机生成的问题。针对每个工作计算 MLFQ 的执行记录。限制每项作业的长度并关闭 I/O,让你的生活更轻松。

状态:

❯ python2 mlfq.py -j 2 -n 2 -M 0 -m 15 -s 1
Here is the list of inputs:
OPTIONS jobs 2
OPTIONS queues 2
OPTIONS allotments for queue  1 is   1
OPTIONS quantum length for queue  1 is  10
OPTIONS allotments for queue  0 is   1
OPTIONS quantum length for queue  0 is  10
OPTIONS boost 0
OPTIONS ioTime 5
OPTIONS stayAfterIO False
OPTIONS iobump False

Job List:
  Job  0: startTime   0 - runTime   2 - ioFreq   0
  Job  1: startTime   0 - runTime  11 - ioFreq   0
执行情况:

0 j0,j1到达
0 j0占用CPU(Q1)
2 j0 运行完成
2 j1 占用CPU(Q1)
12 j0 移入Q0
12 j0使用CPU至完成


2.如何运行调度程序来重现本章中的每个实例？

图 8.2

python2 mlfq.py -l 0,200,0 -Q 10,10,0 


3.将如何配置调度程序参数，像轮转调度程序那样工作？

队列数设为 1



4.设计两个工作的负载和调度程序参数，以便一个工作利用较早的规则 4a 和 4b(用-S 标志打开）来“愚弄”调度程序，在特定的时间间隔内获得 99%的 CPU.

设置-S 参数, 并使时间片长度 >= IO 频率即可



5.给定一个系统，其最高队列中的时间片长度为 10ms,你需要如何频繁地将工作推回到最高优先级级别（带有-B 标志），以保证一个长时间运行（并可能饥饿）的工作得到至少 5%的 CPU?

设置:

-B  190
-B 参数 <= 190 即可

即至少每 200ms 运行 10ms



6.调度中有一个问题，即刚完成 I/O 的作业添加在队列的哪一端。-I 标志改变了这个调度模拟器的这方面行为。尝试一些工作负载，看看你是否能看到这个标志的效果。