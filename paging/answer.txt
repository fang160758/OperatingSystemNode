1.在做地址转换之前，让我们用模拟器来研究线性页表在给定不同参数的情况下如何改变大小。在不同参数变化时，计算线性页表的大小。一些建议输入如下，通过使用-v 标志，你可以看到填充了多少个页表项。
首先，要理解线性页表大小如何随着地址空间的增长而变化：
paging-linear-translate.py -P 1k -a 1m -p 512m -v -n 0
paging-linear-translate.py -P 1k -a 2m -p 512m -v -n 0
paging-linear-translate.py -P 1k -a 4m -p 512m -v -n 0
叶大小1k 地址空间大小1m     --->    页数 = (1m/1k = 1024) 

然后，理解线性页面大小如何随页大小的增长而变化：
paging-linear-translate.py -P 1k -a 1m -p 512m -v -n 0
paging-linear-translate.py -P 2k -a 1m -p 512m -v -n 0
paging-linear-translate.py -P 4k -a 1m -p 512m -v -n 0
--->    叶表大小 = 地址空间大小 / 页面大小

2.现在让我们做一些地址转换。从一些小例子开始，使用－u 标志更改分配给地址空间的页数。例如：
paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 0
paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 25
paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 50
paging-linear-translate.py -P 1k -a 16k -p 32k -v -u 75
paging-linear-translate.py -p 1k -a 16k -p 32k -v -u 100
如果增加每个地址空间中的页的百分比，会发生什么？
有效页比例增大

3.现在让我们尝试一些不同的随机种子，以及一些不同的（有时相当疯狂的）地址空间参数：
paging-linear-translate.py -P 8  -a  32    -p 1024 -v -s 1
paging-linear-translate.py -P 8k -a  32k   -p 1m   -v -s 2
paging-linear-translate.py -P 1m -a  256m  -p 512m -v -s 3
哪些参数组合是不现实的？为什么？

第三个页太大(Linux 页的大小为 4k),导致太多空间被浪费

4.利用该程序尝试其他一些问题。你能找到让程序无法工作的限制吗？例如，如果地址空间大小大于物理内存，会发生什么情况？
fang@fang:~/code/Operating Systream/paging$ python3 paging-linear-translate.py -P 0
ARG seed 0
ARG address space size 16k
ARG phys mem size 64k
ARG page size 0
ARG verbose False
ARG addresses -1

Traceback (most recent call last):
  File "paging-linear-translate.py", line 84, in <module>
    mustbemultipleof(asize, pagesize, 'address space must be a multiple of the pagesize')
  File "paging-linear-translate.py", line 13, in mustbemultipleof
    if (int(float(bignum)/float(num)) != (int(bignum) / int(num))):
ZeroDivisionError: float division by zero