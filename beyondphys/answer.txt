1.首先，打开同一台计算机的两个单独的终端，以便您可以轻松地在两个窗口运行不同的程序。 现在，在一个窗口中运行 vmstat 1，它每秒显示一次计算机资源使用情况信息。 阅读 man 手册，相关的 README 文件以及您需要的其他信息，以便您了解程序输出。 在下面的其余练习中，请使此窗口运行 vmstat。 现在我们将运行程序 mem.c，但使用少量内存。 这可以通过输入 ./mem 1 来完成（仅使用 1 MB 的内存）。 运行 mem 程序时，CPU 使用率统计信息变化情况是怎样的？ user time 列中的数字有意义吗？ 一次运行多个 mem 实例时，变化情况如何？



2.现在让我们开始查看运行 mem 程序时的一些内存统计信息。 我们将重点关注两列：swpd（使用的虚拟内存量）和 free（空闲的内存量）。 运行 ./mem 1024（分配 1024 MB）并观察这些值如何变化。 然后终止正在运行的程序（通过输入 control-c），然后再次观察值的变化。 您如何看待这些值？ 特别是程序退出时，free 列会如何变化？ 内存退出时，可用内存量是否会增加预期的数量？
fang@fang:~/code/Operating Systream/beyondphys$ vmstat -a
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st
 1  0      0 4715800 650084 1958212    0    0  1062    95  426 1247 12  9 78  1  0
fang@fang:~/code/Operating Systream/beyondphys$ vmstat -a
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st
 5  0      0 3658700 656176 3007968    0    0  1041    93  425 1249 12  9 78  1  0
fang@fang:~/code/Operating Systream/beyondphys$ vmstat -a
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st
 7  0      0 3656260 656172 3007228    0    0  1013    91  423 1245 13  9 77  1  0
fang@fang:~/code/Operating Systream/beyondphys$ vmstat -a
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st
 2  0      0 4711516 653100 1956844    0    0  1003    90  424 1253 14  9 77  1  0

3.接下来，我们将查看交换列(si 和 so)，它们表示与磁盘之间发生了多少交换。 当然，要激活它们，您需要使用大量内存运行 mem。 首先，检查您的 Linux 系统上有多少空闲内存(例如，输入cat /proc/meminfo; 输入 man proc 以获得关于 /proc 文件系统的详细信息以及您可以在其中找到的信息类型)。 /proc/meminfo 中的第一个条目是系统中的内存总量。 假设有 8 GB 的内存;如果是这样，首先运行 mem 4000(大约 4 GB)并观察 in/out 列。 它们会给出非零值吗?然后，尝试 5000、6000，等等。 与第一次循环相比，当程序进入第二次循环(及以后)时，这些值会发生什么变化? 在第二次、第三次和随后的循环中，有多少数据(总计)被交换进和交换出?(这些数字有意义吗?)
meme 运行后，换入 376 KB，换出 3416 KB，第二次循环，换入 376 KB， 换出 17724 KB
程序运行后，换出 3579KB， 换入 16KB

4.进行与上述相同的实验，但是现在查看其他统计信息（例如 CPU 利用率和块 I/O 统计信息）。当 mem 运行时，它们如何变化？
user time 增加， system time 先增后减， 空阿咸时间减少

5.现在让我们查看性能。为 mem 选择一个适合内存大小并运行(如果系统上的内存是 8 GB，那么就选 4000)。循环 0 需要多长时间(以及随后的循环 1、2 等等)? 现在选择一个超出内存大小的尺寸(假设内存为 8 GB，那么选 12000)。这里的循环需要多长时间?如何比较带宽数?不断地交换内存和合适的内存大小的性能有什么不同? 你能不能画个图，x 轴是 mem 使用的内存的大小，y 轴是访问内存的带宽
第一次循环 bandwidth： 500 MB/s, 然后系统卡死，直接关机了

6.交换空间不是无限的。您可以 swapon 工具带上 -s 参数来查看有多少交换空间可用。如果您尝试使用越来越大的值运行 mem，超出了交换中可用的值，会发生什么?在什么情况下内存分配失败
循环一次后直接卡死，具体发生了什么也没法查看了

7.最后，如果你想进阶使用，使用 swapon 和 swapoff 配置您的系统，来使用不同的交换设备。 有关详细信息，请阅读 man 手册。如果您可以访问不同的硬件，请查看在交换到到经典硬盘驱动器、基于闪存的 SSD 甚至 RAID 阵列时，切换性能的变化。 通过更新的设备可以提高多少交换性能?您能在多大程度上接近内存性能

