课后作业（编码） 通过该作业，您可以查看一些实际的代码，这些代码会发生死锁（或避免死锁）。 在简单的 vector_add() 函数中，不同版本的代码对应不同的避免死锁的方法。 有关这些程序及其常用基础的详细信息，请参见 README。
问题：
1.首先，先了解程序的总体运行方式以及一些关键选项。 研究 vector-deadlock.c，main-common.c 和相关文件中的代码。 现在运行 ./vector-deadlock -n 2 -l 1 -v，它指定运行两个线程（-n 2），每个线程执行一次 vector_add （-l 1）， 并以详细模式（-v）执行 。 确保你能理解输出。 输出在程序运行时如何变化？
